// <auto-generated />
using System;
using CRM.Models.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRM.Models.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210602184755_updateInvoice")]
    partial class updateInvoice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRM.Models.AccountingPeriod", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 277, DateTimeKind.Local).AddTicks(5175));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 281, DateTimeKind.Local).AddTicks(7113));

                    b.Property<DateTime>("dateLocked")
                        .HasColumnType("datetime2");

                    b.Property<string>("fiscalYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isClosed")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("AccountingPeriod");
                });

            modelBuilder.Entity("CRM.Models.Company", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 287, DateTimeKind.Local).AddTicks(3651));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 287, DateTimeKind.Local).AddTicks(4163));

                    b.Property<string>("address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("contactPerson")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("contactPosition")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("displayAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("displayFaxNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("displayPhone")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("displayTaxCode")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("displyEmail")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("email")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("faxNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("representPerson")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("representPosition")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("taxCode")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CRM.Models.Currency", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 289, DateTimeKind.Local).AddTicks(8151));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 289, DateTimeKind.Local).AddTicks(8581));

                    b.Property<bool>("getExchange")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("CRM.Models.Customer", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 290, DateTimeKind.Local).AddTicks(9294));

                    b.Property<string>("RepresentPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 290, DateTimeKind.Local).AddTicks(9609));

                    b.Property<string>("address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("bankAccountName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("bankName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("bankNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("contactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerTypecode")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("identityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("identityPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("idetityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("taxCode")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.HasIndex("customerTypecode");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CRM.Models.CustomerType", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 323, DateTimeKind.Local).AddTicks(9421));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 323, DateTimeKind.Local).AddTicks(9810));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("CustomerType");

                    b.HasData(
                        new
                        {
                            code = "1",
                            name = "Doanh nghiệp"
                        },
                        new
                        {
                            code = "0",
                            name = "Cá nhân"
                        });
                });

            modelBuilder.Entity("CRM.Models.GLAccount", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 328, DateTimeKind.Local).AddTicks(6228));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 328, DateTimeKind.Local).AddTicks(6551));

                    b.Property<decimal>("creditAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("debitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("isDebit")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("netChange")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("GLAccount");
                });

            modelBuilder.Entity("CRM.Models.GLCategory", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 325, DateTimeKind.Local).AddTicks(9791));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 326, DateTimeKind.Local).AddTicks(139));

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("GLCategory");
                });

            modelBuilder.Entity("CRM.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 330, DateTimeKind.Local).AddTicks(6639));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 330, DateTimeKind.Local).AddTicks(7084));

                    b.Property<string>("functioncode")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("headercode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("itemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("unitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("unitcode")
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("id");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.HasIndex("functioncode");

                    b.HasIndex("headercode");

                    b.HasIndex("unitcode");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("CRM.Models.InvoiceDetailFunction", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 331, DateTimeKind.Local).AddTicks(8942));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 331, DateTimeKind.Local).AddTicks(9405));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("InvoiceDetailFunction");
                });

            modelBuilder.Entity("CRM.Models.InvoiceHeader", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 334, DateTimeKind.Local).AddTicks(1204));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 334, DateTimeKind.Local).AddTicks(1570));

                    b.Property<DateTime?>("accountingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("accountingPersonusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("creditAccountcode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyInText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerBankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerBankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("debitAccountcode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("documentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("eInvoicePublish")
                        .HasColumnType("bit");

                    b.Property<decimal>("exChangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("invoiceNo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("invoiceStatuscode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("invoiceTypecode")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("patern")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("paymentMethodcode")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("paymentTermcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("publishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("sellerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerBankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerBankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalNoTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalWithTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.HasIndex("accountingPersonusername");

                    b.HasIndex("creditAccountcode");

                    b.HasIndex("debitAccountcode");

                    b.HasIndex("invoiceStatuscode");

                    b.HasIndex("invoiceTypecode");

                    b.HasIndex("paymentMethodcode");

                    b.HasIndex("paymentTermcode");

                    b.ToTable("InvoiceHeaders");
                });

            modelBuilder.Entity("CRM.Models.InvoiceStatus", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 335, DateTimeKind.Local).AddTicks(7455));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 335, DateTimeKind.Local).AddTicks(7781));

                    b.Property<bool>("allowEdit")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("InvoiceStatus");
                });

            modelBuilder.Entity("CRM.Models.InvoiceType", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 337, DateTimeKind.Local).AddTicks(4145));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 337, DateTimeKind.Local).AddTicks(4553));

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("InvoiceType");
                });

            modelBuilder.Entity("CRM.Models.PaymentMethod", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 339, DateTimeKind.Local).AddTicks(270));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 339, DateTimeKind.Local).AddTicks(644));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("CRM.Models.PaymentStatus", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 341, DateTimeKind.Local).AddTicks(1935));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 341, DateTimeKind.Local).AddTicks(2294));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("CRM.Models.PaymentTerm", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 342, DateTimeKind.Local).AddTicks(8291));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 342, DateTimeKind.Local).AddTicks(8626));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("CRM.Models.TaxType", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 345, DateTimeKind.Local).AddTicks(1037));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 345, DateTimeKind.Local).AddTicks(1441));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("TaxType");
                });

            modelBuilder.Entity("CRM.Models.Unit", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 346, DateTimeKind.Local).AddTicks(3106));

                    b.Property<string>("UpdateByusername")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 6, 3, 1, 47, 55, 346, DateTimeKind.Local).AddTicks(3527));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("CreateByusername");

                    b.HasIndex("UpdateByusername");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("CRM.Models.User", b =>
                {
                    b.Property<string>("username")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hashKey")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("username");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CRM.Models.AccountingPeriod", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.Company", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.Currency", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.Customer", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.HasOne("CRM.Models.CustomerType", "customerType")
                        .WithMany()
                        .HasForeignKey("customerTypecode");

                    b.Navigation("CreateBy");

                    b.Navigation("customerType");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.CustomerType", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.GLAccount", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.GLCategory", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.InvoiceDetail", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.HasOne("CRM.Models.InvoiceDetailFunction", "function")
                        .WithMany()
                        .HasForeignKey("functioncode");

                    b.HasOne("CRM.Models.InvoiceHeader", "header")
                        .WithMany("details")
                        .HasForeignKey("headercode");

                    b.HasOne("CRM.Models.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitcode");

                    b.Navigation("CreateBy");

                    b.Navigation("function");

                    b.Navigation("header");

                    b.Navigation("unit");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.InvoiceDetailFunction", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.InvoiceHeader", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.HasOne("CRM.Models.User", "accountingPerson")
                        .WithMany()
                        .HasForeignKey("accountingPersonusername");

                    b.HasOne("CRM.Models.GLAccount", "creditAccount")
                        .WithMany()
                        .HasForeignKey("creditAccountcode");

                    b.HasOne("CRM.Models.GLAccount", "debitAccount")
                        .WithMany()
                        .HasForeignKey("debitAccountcode");

                    b.HasOne("CRM.Models.InvoiceStatus", "invoiceStatus")
                        .WithMany()
                        .HasForeignKey("invoiceStatuscode");

                    b.HasOne("CRM.Models.InvoiceType", "invoiceType")
                        .WithMany()
                        .HasForeignKey("invoiceTypecode");

                    b.HasOne("CRM.Models.PaymentMethod", "paymentMethod")
                        .WithMany()
                        .HasForeignKey("paymentMethodcode");

                    b.HasOne("CRM.Models.PaymentTerm", "paymentTerm")
                        .WithMany()
                        .HasForeignKey("paymentTermcode");

                    b.Navigation("accountingPerson");

                    b.Navigation("CreateBy");

                    b.Navigation("creditAccount");

                    b.Navigation("debitAccount");

                    b.Navigation("invoiceStatus");

                    b.Navigation("invoiceType");

                    b.Navigation("paymentMethod");

                    b.Navigation("paymentTerm");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.InvoiceStatus", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.InvoiceType", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.PaymentMethod", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.PaymentStatus", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.PaymentTerm", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.TaxType", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.Unit", b =>
                {
                    b.HasOne("CRM.Models.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByusername");

                    b.HasOne("CRM.Models.User", "UpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdateByusername");

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("CRM.Models.InvoiceHeader", b =>
                {
                    b.Navigation("details");
                });
#pragma warning restore 612, 618
        }
    }
}
